.TH "buffer_printf" 3 "Tue Jan 26 2016" "Version 0.1" "P21451_TIM" \" -*- nroff -*-
.ad l
.nh
.SH NAME
buffer_printf \- printf Functionality for Buffer Module
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBPush_printf\fP (\fBbuffer_t\fP *buf, char *str,\&.\&.\&.)"
.br
.RI "\fIprintf implementation to char buffer \fP"
.ti -1c
.RI "void \fBPush_vprintf\fP (\fBbuffer_t\fP *buf, char *str, va_list vars)"
.br
.RI "\fIvprintf implementation to char buffer \fP"
.ti -1c
.RI "void \fBPushBinary16\fP (\fBbuffer_t\fP *buf, uint16_t x)"
.br
.RI "\fIPush 16 bit binary number to char buffer\&. \fP"
.ti -1c
.RI "void \fBPush_uint16\fP (\fBbuffer_t\fP *buf, uint16_t x)"
.br
.RI "\fIPush unsigned integer to char buffer\&. \fP"
.ti -1c
.RI "void \fBPush_int16\fP (\fBbuffer_t\fP *buf, int16_t x)"
.br
.RI "\fIPush integer to char buffer\&. \fP"
.ti -1c
.RI "void \fBPush_uint32\fP (\fBbuffer_t\fP *buf, uint32_t x)"
.br
.RI "\fIPush unsigned long integer to char buffer\&. \fP"
.ti -1c
.RI "void \fBPush_int32\fP (\fBbuffer_t\fP *buf, int32_t x)"
.br
.RI "\fIPush long to char buffer\&. \fP"
.ti -1c
.RI "void \fBPushStr\fP (\fBbuffer_t\fP *buf, char *str)"
.br
.RI "\fIPush char array (string) to char buffer\&. \fP"
.ti -1c
.RI "void \fBPushHex\fP (\fBbuffer_t\fP *buf, uint16_t x)"
.br
.RI "\fIPush 16 bit value to char buffer in hex format\&. \fP"
.ti -1c
.RI "void \fBPushFloat\fP (\fBbuffer_t\fP *buf, float x)"
.br
.RI "\fICheap implementation of float to char buffer\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\fBbuffer_printf\&.h\fP
.PP
Created on: Mar 11, 2014 Author: Michael
.PP
\fBVersion:\fP
.RS 4
1\&.1 changed naming to match stdint and removed 2Buf from function names 
.PP
1\&.2 added l for int32 and b for 16-bit binary 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void Push_int16 (\fBbuffer_t\fP * buf, int16_t x)"

.PP
Push integer to char buffer\&. Note this function is dependent on \fBPush_uint16()\fP
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to char buffer to print int to 
.br
\fIx\fP Integer to convert to text 
.RE
.PP

.PP
Definition at line 121 of file buffer_printf\&.c\&.
.SS "void Push_int32 (\fBbuffer_t\fP * buf, int32_t x)"

.PP
Push long to char buffer\&. Note this function is dependent on \fBPush_uint32()\fP
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to char buffer to print int to 
.br
\fIx\fP Long to convert to text 
.RE
.PP

.PP
Definition at line 129 of file buffer_printf\&.c\&.
.SS "void Push_printf (\fBbuffer_t\fP * buf, char * str,  \&.\&.\&.)"

.PP
printf implementation to char buffer Currently supports the following replacement flags:
.IP "\(bu" 2
\fCc\fP char, replaces flag with specified ASCII char
.IP "\(bu" 2
\fCb\fP binary, replaces flag with Binary representation See \fBPushBinary16()\fP
.IP "\(bu" 2
\fCl\fP long, replaces flag with Binary Representation See \fBPush_int32()\fP
.IP "\(bu" 2
\fCd\fP signed 16 bit integer, replaces flag with specified int\&. See \fBPush_int16()\fP
.IP "\(bu" 2
\fCe\fP \fCf\fP or \fCg\fP float, replaces flag with specified float See \fBPushFloat()\fP
.IP "\(bu" 2
\fCs\fP string, replaces flag with specified null terminated string See PushString()
.IP "\(bu" 2
\fCu\fP unsigned 16 bit integer, replaces flag with specified unsigned int See \fBPush_uint16()\fP
.IP "\(bu" 2
\fCx\fP 16 bit hex formated integer, replaces flag with 4 digit hex value See \fBPushHex()\fP
.PP
.PP
Example: 
.PP
.nf
1 buffer_t tx;
2 \&.\&.\&.
3 int16_t x = -1;
4 char name[] = "Muhlbaier";
5 Push_printf(&tx, "x = %d, hex - 0x%x, unsigned %u, name = %s);

.fi
.PP
 Would push to the buffer: 'x = -1, hex - 0xFFFF, unsigned 65535, name = Muhlbaier'
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to char buffer to print formatted string to 
.br
\fIstr\fP Pointer to null terminated string with replacement flags 
.br
\fI\&.\&.\&.\fP Variable argument list corresponding with replacement flags 
.RE
.PP

.PP
Definition at line 17 of file buffer_printf\&.c\&.
.SS "void Push_uint16 (\fBbuffer_t\fP * buf, uint16_t x)"

.PP
Push unsigned integer to char buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to char buffer to print unsigned int to 
.br
\fIx\fP Unsigned integer to convert to text 
.RE
.PP

.PP
Definition at line 100 of file buffer_printf\&.c\&.
.SS "void Push_uint32 (\fBbuffer_t\fP * buf, uint32_t x)"

.PP
Push unsigned long integer to char buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to char buffer to print unsigned long to 
.br
\fIx\fP Unsigned integer to convert to text 
.RE
.PP

.PP
Definition at line 137 of file buffer_printf\&.c\&.
.SS "void Push_vprintf (\fBbuffer_t\fP * buf, char * str, va_list vars)"

.PP
vprintf implementation to char buffer Same as \fBPush_printf()\fP except with a va_list pointer instead of an actual variable argument list\&. This allows other functions similar to Push_printf to be implemented\&.
.PP
For example: 
.PP
.nf
1 void LogStr(char * str, \&.\&.\&.) {
2    va_list vars;
3    va_start(vars, str);
4    // use Push_vprintf to log to SUBSYS_UART
5    Push_vprintf(SUBSYS_UART, str, vars);
6    va_end(vars);
7 }

.fi
.PP
.PP
See \fBPush_printf()\fP
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to char buffer to print formatted string to 
.br
\fIstr\fP Pointer to null terminated string with replacement flags 
.br
\fIvars\fP Variable argument list corresponding with replacement flags 
.RE
.PP

.PP
Definition at line 27 of file buffer_printf\&.c\&.
.SS "void PushBinary16 (\fBbuffer_t\fP * buf, uint16_t x)"

.PP
Push 16 bit binary number to char buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to char buffer to print to 
.br
\fIx\fP Unsigned 16-bit integer to convert to text in binary format 
.RE
.PP

.PP
Definition at line 113 of file buffer_printf\&.c\&.
.SS "void PushFloat (\fBbuffer_t\fP * buf, float x)"

.PP
Cheap implementation of float to char buffer\&. Current implementation will format float as 0\&.000 by first printing out the integer portion of the float then multiplying the float by 1000 and subtracting the integer portion x 1000 and printing that after the \&.
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to char buffer to print float to 
.br
\fIx\fP Float value to convert to text 
.RE
.PP

.PP
Definition at line 171 of file buffer_printf\&.c\&.
.SS "void PushHex (\fBbuffer_t\fP * buf, uint16_t x)"

.PP
Push 16 bit value to char buffer in hex format\&. Will push four char's to the buffer, for example: A0F3
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to char buffer to print hex formatted int to 
.br
\fIx\fP Integer to convert to hex 
.RE
.PP

.PP
Definition at line 156 of file buffer_printf\&.c\&.
.SS "void PushStr (\fBbuffer_t\fP * buf, char * str)"

.PP
Push char array (string) to char buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to char buffer to print string to 
.br
\fIstr\fP Pointer to null terminated char array (e\&.g\&. string) 
.RE
.PP

.PP
Definition at line 150 of file buffer_printf\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for P21451_TIM from the source code\&.
