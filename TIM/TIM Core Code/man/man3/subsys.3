.TH "subsys" 3 "Tue Jan 26 2016" "Version 0.1" "P21451_TIM" \" -*- nroff -*-
.ad l
.nh
.SH NAME
subsys \- Subsystem Module
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBversion_mmb_t\fP"
.br
.ti -1c
.RI "union \fBversion_t\fP"
.br
.RI "\fIversion union \fP"
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSYSTEM_VERSION\fP   0x03010001u"
.br
.RI "\fIsubsystem module version number \fP"
.ti -1c
.RI "#define \fBRECEIVE_MAX_LENGTH\fP   64"
.br
.RI "\fIdefault length of receive line for commands \fP"
.ti -1c
.RI "#define \fBRECEIVE_START_CHAR\fP   '$'"
.br
.RI "\fIstart character for command lines \fP"
.ti -1c
.RI "#define \fBRECEIVE_STOP_CHAR\fP   '\\r'"
.br
.RI "\fIstop character for command lines \fP"
.ti -1c
.RI "#define \fBRECEIVE_MAX_ARGC\fP   8"
.br
.RI "\fImax number of arguments after the command name \fP"
.ti -1c
.RI "#define \fBGetLogTimestamp\fP()   \fBTimeNow\fP()"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBLogStr\fP (char *str,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBLogMsg\fP (uint8_t subsystem_id, char *str,\&.\&.\&.)"
.br
.ti -1c
.RI "uint8_t \fBSubsystem_Init\fP (char *name, \fBversion_t\fP version, void(*callback)(int argc, char *argv[]))"
.br
.ti -1c
.RI "void \fBSubsystem_RegisterCallback\fP (uint8_t subsystem_id, void(*callback)(int argc, char *argv[]))"
.br
.ti -1c
.RI "char * \fBGetSubsystemName\fP (uint8_t subsystem_id)"
.br
.ti -1c
.RI "void \fBLog_EchoOn\fP (void)"
.br
.ti -1c
.RI "void \fBLog_EchoOff\fP (void)"
.br
.ti -1c
.RI "uint8_t \fBLog_GetEcho\fP (void)"
.br
.ti -1c
.RI "void \fBLog_Header\fP (uint8_t subsystem_id)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Created on: Mar 12, 2014 
.PP
\fBAuthor:\fP
.RS 4
: Michael
.RE
.PP
\fBVersion:\fP
.RS 4
2014\&.03\&.26 changed SystemTick to SubsystemTick so the Task Management Module can own \fBSystemTick()\fP 
.PP
2\&.0\&.1 added version, setup SYSTEM subsystem, changed warning messages to priority WARNING and set default priority to ERROR to suppress messages 
.PP
3\&.1\&.1 removed log levels and redueced to mute or unmute\&. Moved receiver functionality to UART module\&. Changed callback to take argc argv inputs and added parsing to create argc and argv\&. 
.RE
.PP
SubSystem module command interface
If bi-directional communication is available (e\&.g\&. UART) then the user can interface with the SubSystem module in real time using the module's command interface\&.
.PP
A command can be sent to the module in the following format: 
.PP
.nf
$command -f0

.fi
.PP
 Where the $ indicates the start of the command, command is the name of the command and -f8 is a flag with a value of 8\&. 
.br
Valid system flags are \fC-s\fP, \fC-l\fP and \fC-g\fP 
.PP
The commands available are:
.PP
\fCversion\fP (or \fCver\fP) - will output a list of subsystems and their version\&. No flags are applicable\&.
.PP
\fClevel\fP (or \fClev\fP) - if no flags are given \fClevel\fP will output level a list of valid level codes and their names as used in the log messages\&. If a \fC-l\fP flag is given but not a \fC-s\fP flag then the level specified with the \fC-l\fP flag is set as the global level\&. If the \fC-l\fP and \fC-s\fP flags are given then set the level specified with the \fC-l\fP flag for the subsystem specified with the \fC-s\fP flag\&. If a \fC-g\fP flag is given it will set the global log level to the specified value\&. The global log level will for any message from any subsystem to be logged if its level is at the global level or below\&.
.PP
\fCsubsystem\fP (or \fCsub\fP or \fCsys\fP or \fCsystem\fP) - will output a list of valid subsystem codes and their associated subsystem names and their current log level setting as used by the log message functions\&. The \fC-s\fP flag can be used to return only information about the specified subsystem\&.
.PP
Example usage: 
.PP
.nf
$version

$sub

$level

$level -l0

$level -s0 -l2

.fi
.PP
.PP
In the above example:
.IP "\(bu" 2
output the subsystems and their versions
.IP "\(bu" 2
output the subsystems and their codes
.IP "\(bu" 2
output the log levels and their codes
.IP "\(bu" 2
set the global log level to 0 (OFF)
.IP "\(bu" 2
set the log level for subsystem 0 (SYSTEM) is set to 2 (ERROR)\&.
.PP
.PP
The end result is that no messages would be logged unless they were SYSTEM messages with a priority level greater than or equal to ERROR (note higher priority is lower numerically)\&.
.PP
Additionally commands may be forwarded to the callback of compatible subsystems using the following format 
.PP
.nf
$12 command <anything goes>
$MUH play

.fi
.PP
 In the first line subsystem index 12 is sent the command string starting after the space\&. In the second line a module named MUH is sent a command 'play'
.PP
\fBTodo\fP
.RS 4
MM Update this comment block 
.RE
.PP

.SS "Subsystem module initialization"
Below are three example of how a subsystem could initialize itself\&.
.PP
.PP
.nf
// define the version
#define TASK_VERSION (version_t)0x01010014u

// initialize module to log EVERYTHING and to use "task" to refer
// to this subsystem in output messages
SubsystemInit(TASK, EVERYTHING, "task", TASK_VERSION);

// or another way to do the same thing

#define TASK_VERSION_MAJOR 1
#define TASK_VERSION_MINOR 1
#define TASK_VERSION_BUILD 20

version_t task_version;
task_version\&.major = TASK_VERSION_MAJOR;
task_version\&.minor = TASK_VERSION_MINOR;
task_version\&.build = TASK_VERSION_BUILD;

SubsystemInit(TASK, EVERYTHING, "task", task_version);

// or to do it all in one line
uint8_t task_id;
task_id = SubsystemInit(EVERYTHING, "task", (version_t)0x01010014u);
LogMsG(task_id, WARNING, "Crap hit the fan");
.fi
.PP
.PP
\fBTodo\fP
.RS 4
MM Update this comment block 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define GetLogTimestamp()   \fBTimeNow\fP()"
GetLogTimestamp must be defined so that it returns a integer (up to 32 bits) timestamp 
.PP
Definition at line 156 of file subsys\&.h\&.
.SS "#define RECEIVE_MAX_ARGC   8"

.PP
max number of arguments after the command name 
.PP
Definition at line 27 of file subsys\&.h\&.
.SS "#define RECEIVE_MAX_LENGTH   64"

.PP
default length of receive line for commands 
.PP
Definition at line 23 of file subsys\&.h\&.
.SS "#define RECEIVE_START_CHAR   '$'"

.PP
start character for command lines 
.PP
Definition at line 25 of file subsys\&.h\&.
.SS "#define RECEIVE_STOP_CHAR   '\\r'"

.PP
stop character for command lines 
.PP
Definition at line 26 of file subsys\&.h\&.
.SS "#define SYSTEM_VERSION   0x03010001u"

.PP
subsystem module version number 
.PP
Definition at line 20 of file subsys\&.h\&.
.SH "Function Documentation"
.PP 
.SS "char* GetSubsystemName (uint8_t subsystem_id)"
Return a pointer to a string corresponding to the name of the subsystem
.PP
The name returned is the one set by SubsystemInit()
.PP
\fBParameters:\fP
.RS 4
\fIsubsystem_id\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
- pointer to a null terminated string corresponding to the name of the subsystem 
.RE
.PP

.PP
Definition at line 85 of file subsys\&.c\&.
.SS "void Log_EchoOff (void)"
Turn echo feature off 
.PP
Definition at line 349 of file subsys\&.c\&.
.SS "void Log_EchoOn (void)"
Turn echo featuren on (default is off) 
.PP
Definition at line 345 of file subsys\&.c\&.
.SS "uint8_t Log_GetEcho (void)"
Get status of echo setting
.PP
\fBReturns:\fP
.RS 4
echo setting, 1 if echo is on 
.RE
.PP

.PP
Definition at line 353 of file subsys\&.c\&.
.SS "void Log_Header (uint8_t subsystem_id)"
Log header (timestamp and subsystem name)
.PP
\fBParameters:\fP
.RS 4
\fIsubsystem_id\fP subsystem id (index) 
.RE
.PP

.PP
Definition at line 294 of file subsys\&.c\&.
.SS "void LogMsg (uint8_t subsystem_id, char * str,  \&.\&.\&.)"
Logs the message at the pointer (str) with a timestamp and subsystem name
.PP
Before logging the message the function will check the current log setting of the subsystem and to determine if the message should be logged
.PP
This function is implemented using Push_vprintf\&. See \fBPush_printf()\fP for supported flags/features\&.
.PP
Will log the string to the buffer defined by SUSSYS_UART
.PP
\fBParameters:\fP
.RS 4
\fIsubsystem_id\fP subsystem id 
.br
\fIstr\fP pointer to message to log 
.br
\fI\&.\&.\&.\fP variable number of replacement parameters for the str string
.RE
.PP
Example usage: 
.PP
.nf
1 LogMsg(sys\&.id, "oops I crapped my pants");
2 LogMsg(sys\&.id, "System Index %d, System Name %s\&.", sys\&.id, GetSubsystemName(SYSTEM));

.fi
.PP
 
.PP
Definition at line 275 of file subsys\&.c\&.
.SS "void LogStr (char * str,  \&.\&.\&.)"
Logs the null terminated string at the pointer (str)
.PP
Same as \fBLogMsg()\fP without the header in the beginning and without the CRLF at the end\&.
.PP
This function is implemented using Push_vprintf\&. See \fBPush_printf()\fP for supported flags/features\&.
.PP
Will log the string to the buffer defined by LOG_BUF (typically tx0)
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP pointer to string to log 
.br
\fI\&.\&.\&.\fP variable number of replacement parameters for the str string
.RE
.PP
Example usage: 
.PP
.nf
1 LogStr("oops I crapped my pants");
2 LogStr("System Index %d, System Name %s\&.", SYSTEM, GetSubsystemName(SYSTEM));

.fi
.PP
 
.PP
Definition at line 264 of file subsys\&.c\&.
.SS "uint8_t Subsystem_Init (char * name, \fBversion_t\fP version, void(*)(int argc, char *argv[]) callback)"
Initialize settings for a subsystem - critical for proper logging and command interface
.PP
If a module/subsystem uses logging it should call this function with the appropriate inputs when the subsystem is initializing\&.
.PP
\fBReturns:\fP
.RS 4
subsystem index 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIname\fP pointer to name of the subsystem (recommended to make the name 8 characters or less) 
.br
\fIversion\fP software version of subsystem, see \fBversion_t\fP for more info 
.br
\fIcallback\fP callback function to be called when the user inputs a command in the form of '$name var1 var2 var3\&.\&.\&.'\&. Where name is the name passed to this function\&. The callback will be passed the number of arguments, \fCargc\fP , and a array of pointers to the argument strings, \fCargv\fP\&. 
.RE
.PP

.PP
Definition at line 102 of file subsys\&.c\&.
.SS "void Subsystem_RegisterCallback (uint8_t subsystem_id, void(*)(int argc, char *argv[]) callback)"
Register a callback function for a subsystem
.PP
When a command is received by the logging module for the subsystem \fCsys\fP the \fCcallback\fP function will be executed and passed the number of arguments \fCargc\fP and a array (vector) of pointer to the argument strungs \fCargv\fP\&.
.PP
The callback is set by \fBSubsystem_Init()\fP, this function can be used to update the callback\&.
.PP
\fBParameters:\fP
.RS 4
\fIsubsystem_id\fP - subsystem to register the callback for 
.br
\fIcallback\fP - function pointer to the function to run when a command is received for the subsystem\&. 
.RE
.PP

.PP
Definition at line 113 of file subsys\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for P21451_TIM from the source code\&.
