#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
    SleekXMPP: The Sleek XMPP Library
    Copyright (C) 2010  Nathanael C. Fritz
    This file is part of SleekXMPP.

    See the file LICENSE for copying permission.
"""
import xml.etree.ElementTree as ET
import urllib2
import sys
import logging
import getpass
from optparse import OptionParser
from random import *

import sleekxmpp

clientjab= 'test'

# Python versions before 3.0 do not use UTF-8 encoding
# by default. To ensure that Unicode is handled properly
# throughout SleekXMPP, we will set the default encoding
# ourselves to UTF-8.
if sys.version_info < (3, 0):
    reload(sys)
    sys.setdefaultencoding('utf8')
else:
    raw_input = input
##############################################################
def MessageParse(msg):
	stringy = str( msg['body'])
	parse = stringy.split(",")
	functionId = parse[0]
	ncapId =  parse[1]
	timId =  parse[2]
	channelId =  parse[3]
	timeout =  parse[4]
	if functionId == '7212' or '7214' or '7218':
		numberOfSamples = parse[5]
		sampleInterval = parse[6]
		startTime = parse[7]
		if functionId == '7218':
			dataValue = parse[8]
			return {'functionId':functionId, 'ncapId':ncapId, 'timId':timId, 'channelId':channelId, 'timeout':timeout, 'numberOfSamples':numberOfSamples, 'sampleInterval':sampleInterval, 'startTime':startTime, 'dataValue':dataValue}
		return {'functionId':functionId, 'ncapId':ncapId, 'timId':timId, 'channelId':channelId, 'timeout':timeout, 'numberOfSamples':numberOfSamples, 'sampleInterval':sampleInterval, 'startTime':startTime}
	samplingMode = parse[5]
	if functionId == '7217' or '7211':
		dataValue = parse[6]
		return {'functionId':functionId, 'ncapId':ncapId, 'timId':timId, 'channelId':channelId, 'timeout':timeout, 'samplingMode':samplingMode, 'dataValue':dataValue}
	#errorCode = 1
	return {'functionId':functionId, 'ncapId':ncapId, 'timId':timId, 'channelId':channelId, 'timeout':timeout, 'samplingMode':samplingMode} 
##############################################################
def NCAPClientUnJoin(NCAP_ID):
        #print ServiceType
        #print NCAP_ID
        """
        Checks to see if user is registered.
        Registers the user if a request is recieved.
        Unsubcribes if reques is recieved.
        
        returns FALSE for unregistered, TRUE for registered.
        """
        OnRoster=0

        tree = ET.parse('roster.xml')
    
        root = tree.getroot()

        # We need to replace this name with the jid from an incoming message
       # print name

        # This message needs to be extracted from the sleekxmpp library
        #message = msg['body']
        #print message

        # Setting our list to an empty array
        jid = []

        #We need to find all of our users in our roster and then we can find the JID attribute
        for user in root.findall('user'):
            jid.append(user.find('jid').text)
            #print(jid)

        # Check to see if the jid is in our list. If it is, we will respond to the message.
        try:
            OnRoster = 1
            jid.index(NCAP_ID)
            #print position
        except:
            # The .index function throws an error if there is no match, so we will use this as
            #our non-subscribed option.
            OnRoster = -1

        if OnRoster >= 0:
            print('Unsubscription Request Recieved')
    #We need to find all of our users in our roster and then we can find the JID attribute
            for user in root.findall('user'):
                test12= (user.find('jid').text)
                if test12 == NCAP_ID:
                    root.remove(user)
                    unsub=1
            tree.write('roster.xml')        

        return OnRoster
##############################################################
def NCAPClientJoin(NCAP_ID):

    """
    Checks to see if user is registered.
    Registers the user if a request is recieved.
    Unsubcribes if reques is recieved.
    
    returns FALSE for unregistered, TRUE for registered.
    """
    OnRoster=0

    tree = ET.parse('roster.xml')

    root = tree.getroot()

    # We need to replace this name with the jid from an incoming message
   # print name

    # This message needs to be extracted from the sleekxmpp library
    #message = msg['body']
    #print message

    # Setting our list to an empty array
    jid = []

    #We need to find all of our users in our roster and then we can find the JID attribute
    for user in root.findall('user'):
        jid.append(user.find('jid').text)
        #print(jid)

    # Check to see if the jid is in our list. If it is, we will respond to the message.
    try:
        jid.index(NCAP_ID)
        OnRoster = 1
        #print position
    except:
        # The .index function throws an error if there is no match, so we will use this as
        #our non-subscribed option.
        OnRoster = -1
        #ServiceType=='7108':
        print('Subscription Request Recieved')
        newuser = ET.Element("user")
        newuser.text = '\n'
        root.append(newuser)
        newuser.set('subscription', 'true')
        jabber=ET.Element("jid")
        newuser.append(jabber)
        jabber.text='%s' %(NCAP_ID)
        tree.write('roster.xml')
        
    return (OnRoster)*-1
##############################################################
def NCAPTimRegister(NCAP_ID):

    """
    Checks to see if tim is registered.
    Registers the user if a request is recieved.
    
    returns -1 for unregistered, 1 for registered.
    """
    OnRoster=0
    print 'started'
    tree = ET.parse('timroster.xml')
    print 'parsed'
    root = tree.getroot()



    # Setting our list to an empty array
    jid = []

    #We need to find all of our users in our roster and then we can find the JID attribute
    for user in root.findall('user'):
        jid.append(user.find('jid').text)
        #print(jid)

    # Check to see if the jid is in our list. If it is, we will respond to the message.
    try:
        jid.index(NCAP_ID)
        OnRoster = 1
        #print position
    except:
        # The .index function throws an error if there is no match, so we will use this as
        #our non-subscribed option.
        OnRoster = -1
        #ServiceType=='7103':
        print('Subscription Request Recieved')
        newuser = ET.Element("user")
        newuser.text = '\n'
        root.append(newuser)
        newuser.set('subscription', 'true')
        jabber=ET.Element("jid")
        newuser.append(jabber)
        jabber.text='%s' %(NCAP_ID)
        tree.write('timroster.xml')
        
    return (OnRoster)*-1
##############################################################
def NCAPTimUnRegister(NCAP_ID):
        """
        Checks to see if tim is registered.
        Unsubcribes if request is recieved.
        
        returns -1 for unregistered, 1 for registered.
        """
        OnRoster=0

        tree = ET.parse('timroster.xml')
    
        root = tree.getroot()

        # We need to replace this name with the jid from an incoming message
       # print name

        # This message needs to be extracted from the sleekxmpp library
        #message = msg['body']
        #print message

        # Setting our list to an empty array
        jid = []

        #We need to find all of our users in our roster and then we can find the JID attribute
        for user in root.findall('user'):
            jid.append(user.find('jid').text)
            #print(jid)

        # Check to see if the jid is in our list. If it is, we will respond to the message.
        try:
            OnRoster = 1
            jid.index(NCAP_ID)
            #print position
        except:
            # The .index function throws an error if there is no match, so we will use this as
            #our non-subscribed option.
            OnRoster = -1

        if OnRoster >= 0:
            print('Unsubscription Request Recieved')
    #We need to find all of our users in our roster and then we can find the JID attribute
            for user in root.findall('user'):
                test12= (user.find('jid').text)
                if test12 == NCAP_ID:
                    root.remove(user)
                    unsub=1
            tree.write('timroster.xml')        

        return OnRoster
##############################################################
def NCAPServerDiscovery(NCAP_ID):
    #print ServiceType
    #print NCAP_ID
    """
    Checks to see if user is registered.
    Registers the user if a request is recieved.
    Unsubcribes if reques is recieved.
    
    returns FALSE for unregistered, TRUE for registered.
    """
    OnRoster=0

    tree = ET.parse('roster.xml')

    root = tree.getroot()

    # We need to replace this name with the jid from an incoming message
   # print name

    # This message needs to be extracted from the sleekxmpp library
    #message = msg['body']
    #print message

    # Setting our list to an empty array
    jid = []

    #We need to find all of our users in our roster and then we can find the JID attribute
    for user in root.findall('user'):
        jid.append(user.find('jid').text)
        #print(jid)

    # Check to see if the jid is in our list. If it is, we will respond to the message.
    try:
        OnRoster = 1
        jid.index(NCAP_ID)
        #print position
    except:
        # The .index function throws an error if there is no match, so we will use this as
        #our non-subscribed option.
        OnRoster = -1

    return OnRoster
##############################################################
def NCAPTimDiscovery(NCAP_ID):

    """
    Checks to see if tim is registered.
    
    returns FALSE for unregistered, TRUE for registered.
    """
    OnRoster=0

    tree = ET.parse('timroster.xml')

    root = tree.getroot()

    # Setting our list to an empty array
    jid = []

    #We need to find all of our users in our roster and then we can find the JID attribute
    for user in root.findall('user'):
        jid.append(user.find('jid').text)
        #print(jid)

    # Check to see if the jid is in our list. If it is, we will respond to the message.
    try:
        OnRoster = 1
        jid.index(NCAP_ID)
        #print position
    except:
        # The .index function throws an error if there is no match, so we will use this as
        #our non-subscribed option.
        OnRoster = -1

    return OnRoster
##############################################################
class EchoBot(sleekxmpp.ClientXMPP):

    """
    A simple SleekXMPP bot that will echo messages it
    receives, along with a short thank you message.
    """

    def __init__(self, jid, password):
        sleekxmpp.ClientXMPP.__init__(self, jid, password)

        # The session_start event will be triggered when
        # the bot establishes its connection with the server
        # and the XML streams are ready for use. We want to
        # listen for this event so that we we can initialize
        # our roster.
        self.add_event_handler("session_start", self.start)

        # The message event is triggered whenever a message
        # stanza is received. Be aware that that includes
        # MUC messages and error messages.
        self.add_event_handler("message", self.message)
    def start(self, event):
        """
        Process the session_start event.

        Typical actions for the session_start event are
        requesting the roster and broadcasting an initial
        presence stanza.

        Arguments:
            event -- An empty dictionary. The session_start
                     event does not provide any additional
                     data.
        """
        
        self.send_presence()
        self.get_roster()
        print 'You are logged on \n'
        
    def message(self, msg):
        #print msg
        global clientjab
        Func_ret=0
        jab='%s' %(msg['from'])
        
        print 'MESSAGE RECIEVED- %s: %s'%(msg['from'], msg['body'])

        MSG = MessageParse(msg)
        print 'Message Paresed'
        
        NCAP_JID= NCAPTimDiscovery(jab)#theres no unregister on the standard?
        
        if (MSG['functionId']=='7108'):
            Func_ret=NCAPClientJoin(jab)
            print Func_ret
            if Func_ret==1:
                self.send_message(mto=jab, mbody='User Registered') 
                print 'User Succesfully Registered \n'
                print Func_ret
            elif Func_ret==-1:
                self.send_message(mto=jab, mbody='ERROR- USER ALREADY REGISTERED') 
                print 'ERROR: ALREADY REGISTERED, Sending Error Message \n'
            return
            
        if (MSG['functionId']=='7109'):
            Func_ret=NCAPClientUnJoin(jab)
            print Func_ret
            if Func_ret==1:
                self.send_message(mto=jab, mbody='User Removed') 
                print 'User Succesfully Removed \n'
                print Func_ret
            elif Func_ret==-1:
                self.send_message(mto=jab, mbody='ERROR- USER NOT REGISTERED') 
                print 'ERROR: NOT REGISTERED, Sending Error Message \n'
            return
            
        if (MSG['functionId']=='7105'):
            Func_ret=NCAPServerDiscovery(jab)
            print Func_ret
            if Func_ret==1:
                self.send_message(mto=jab, mbody='User is on Roster') 
                print 'User Succesfully Registered \n'
                print Func_ret
            elif Func_ret==-1:
                self.send_message(mto=jab, mbody='User is not on Roster') 
                print 'User is not on Roster \n'
            return
            
        if (MSG['functionId'] == '7103'):
            print '7213 request recieved'
            Func_ret=NCAPTimRegister(jab)
            print Func_ret
            return
            
        if (MSG['functionId'] == '710x'):
            print '721x request recieved'
            Func_ret=NCAPTimUnRegister(jab)
            print Func_ret
            return
            
        if (MSG['functionId'] == '7106'):
            print '7216 request recieved'
            Func_ret=NCAPTimDiscovery(jab)
            print Func_ret
            return
            
        if (MSG['functionId'] == '7211'):
            print '7211 request recieved'
            clientjab= jab
            print clientjab
            self.send_message(mto='sean@jahschwa.com', mbody='7211,1,1,1,1,1,1,1')
            return
            
        if(NCAP_JID == 1):
            print clientjab
            print dataValue
            self.send_message(mto=clientjab, mbody='%s centimeters'%(dataValue))
            return
            
if __name__ == '__main__':
    # Setup the command line arguments.
    print 'loading'
    optp = OptionParser()
    
    optp.add_option('-d', '--debug', help='set logging to DEBUG',
                    action='store_const', dest='loglevel',
                    const=logging.DEBUG, default=logging.INFO)

    # JID and password options.
    optp.add_option("-j", "--jid", dest="jid",
                    help="JID to use")
    optp.add_option("-p", "--password", dest="password",
                    help="password to use")

    opts, args = optp.parse_args()


    if opts.jid is None:
        opts.jid = 'andrew@jahschwa.com'
    if opts.password is None:
        opts.password = 'password'
    if opts.loglevel is None:
        opts.loglevel = '-d'
    # Setup the EchoBot and register plugins. Note that while plugins may
    # have interdependencies, the order in which you register them does
    # not matter.
    xmpp = EchoBot(opts.jid, opts.password)
    xmpp.register_plugin('xep_0030') # Service Discovery
    xmpp.register_plugin('xep_0004') # Data Forms
    xmpp.register_plugin('xep_0060') # PubSub
    xmpp.register_plugin('xep_0199') # XMPP Ping

    # If you are working with an OpenFire server, you may need
    # to adjust the SSL version used:
    # xmpp.ssl_version = ssl.PROTOCOL_SSLv3

    # If you want to verify the SSL certificates offered by a server:
    # xmpp.ca_certs = "path/to/ca/cert"

    # Connect to the XMPP server and start processing XMPP stanzas.
    if xmpp.connect():
        # If you do not have the dnspython library installed, you will need
        # to manually specify the name of the server if it does not match
        # the one in the JID. For example, to use Google Talk you would
        # need to use:
        #
        # if xmpp.connect(('talk.google.com', 5222)):
        #     ...
        xmpp.process(block=True)
        print("Done")
    else:
        print("Unable to connect.")
